{
    "name": "rust",
    "displayName": "Rust",
    "description": "Rust for Visual Studio Code (powered by Rust Language Server/Rust Analyzer). Provides lints, code completion and navigation, formatting and more.",
    "version": "0.7.8",
    "publisher": "rust-lang",
    "icon": "icon.png",
    "galleryBanner": {
        "color": "#336356",
        "theme": "dark"
    },
    "engines": {
        "vscode": "^1.43.0"
    },
    "license": "(MIT OR Apache-2.0)",
    "repository": {
        "type": "git",
        "url": "https://github.com/rust-lang/vscode-rust"
    },
    "bugs": {
        "url": "https://github.com/rust-lang/vscode-rust/issues"
    },
    "categories": [
        "Programming Languages",
        "Linters",
        "Snippets",
        "Formatters",
        "Other"
    ],
    "keywords": [
        "rust",
        "rust-lang",
        "rls",
        "multi-root ready"
    ],
    "preview": true,
    "activationEvents": [
        "onLanguage:rust",
        "workspaceContains:Cargo.toml"
    ],
    "main": "./out/src/extension.js",
    "scripts": {
        "vscode:prepublish": "npm run check:version && npm run lint && npm run compile",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "lint": "eslint --ext ts src",
        "test": "node ./out/test/runTest.js",
        "prettier": "prettier \"**/*.ts\"",
        "check:version": "node cmd/check-version.js",
        "installDevExtension": "npm install && ./node_modules/.bin/vsce package -o ./out/rls-vscode-dev.vsix && code --install-extension ./out/rls-vscode-dev.vsix"
    },
    "dependencies": {
        "node-fetch": "^2.6.7",
        "vscode-languageclient": "^6.0.0"
    },
    "devDependencies": {
        "@types/chai": "^4.2.11",
        "@types/glob": "^7.1.1",
        "@types/mocha": "^5.2.6",
        "@types/node": "^12.8.1",
        "@types/node-fetch": "^2.5.7",
        "@types/vscode": "^1.43.0",
        "@typescript-eslint/eslint-plugin": "^3.9.1",
        "@typescript-eslint/parser": "^3.9.1",
        "chai": "^4.2.0",
        "eslint": "^7.7.0",
        "eslint-config-prettier": "^6.11.0",
        "glob": "^7.1.4",
        "mocha": "^6.2.3",
        "prettier": "^1.19.1",
        "typescript": "^3.8.3",
        "vsce": "^1.63.0",
        "vscode-test": "^1.3.0"
    },
    "contributes": {
        "languages": [
            {
                "id": "rust",
                "extensions": [
                    ".rs"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "snippets": [
            {
                "language": "rust",
                "path": "./snippets/rust.json"
            }
        ],
        "commands": [
            {
                "command": "rls.update",
                "title": "Update the current Rust toolchain",
                "description": "Use Rustup to the current Rust toolchain, along with its components",
                "category": "Rust"
            },
            {
                "command": "rls.restart",
                "title": "Restart the Rust server",
                "description": "Sometimes, it's just best to try turning it off and on again",
                "category": "Rust"
            },
            {
                "command": "rls.start",
                "title": "Start the Rust server",
                "description": "Start the Rust server (when rust-client.autoStartRls is false or when manually stopped)",
                "category": "Rust"
            },
            {
                "command": "rls.stop",
                "title": "Stop the Rust server",
                "description": "Stop the Rust server for a workspace until manually started again",
                "category": "Rust"
            }
        ],
        "taskDefinitions": [
            {
                "type": "cargo",
                "properties": {
                    "subcommand": {
                        "type": "string"
                    }
                },
                "required": [
                    "subcommand"
                ]
            }
        ],
        "problemMatchers": [
            {
                "name": "rustc",
                "owner": "rust",
                "fileLocation": [
                    "relative",
                    "${workspaceRoot}"
                ],
                "pattern": [
                    {
                        "regexp": "^(warning|warn|error)(\\[(.*)\\])?: (.*)$",
                        "severity": 1,
                        "message": 4,
                        "code": 3
                    },
                    {
                        "regexp": "^([\\s->=]*(.*):(\\d*):(\\d*)|.*)$",
                        "file": 2,
                        "line": 3,
                        "column": 4
                    },
                    {
                        "regexp": "^.*$"
                    },
                    {
                        "regexp": "^([\\s->=]*(.*):(\\d*):(\\d*)|.*)$",
                        "file": 2,
                        "line": 3,
                        "column": 4
                    }
                ]
            }
        ],
        "configuration": {
            "type": "object",
            "title": "Rust",
            "properties": {
                "rust-client.engine": {
                    "type": "string",
                    "enum": [
                        "rls",
                        "rust-analyzer"
                    ],
                    "enumDescriptions": [
                        "Use the Rust Language Server (RLS)",
                        "Use the rust-analyzer language server (NOTE: not fully supported yet)"
                    ],
                    "default": "rls",
                    "description": "The underlying LSP server used to provide IDE support for Rust projects.",
                    "scope": "window"
                },
                "rust-client.logToFile": {
                    "type": "boolean",
                    "default": false,
                    "description": "When set to true, RLS stderr is logged to a file at workspace root level. Requires reloading extension after change."
                },
                "rust-client.rustupPath": {
                    "type": "string",
                    "default": "rustup",
                    "description": "Path to rustup executable. Ignored if rustup is disabled.",
                    "scope": "machine"
                },
                "rust-client.rlsPath": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Override RLS path. Only required for RLS developers. If you set this and use rustup, you should also set `rust-client.channel` to ensure your RLS sees the right libraries. If you don't use rustup, make sure to set `rust-client.disableRustup`.",
                    "scope": "machine"
                },
                "rust-client.revealOutputChannelOn": {
                    "type": "string",
                    "enum": [
                        "info",
                        "warn",
                        "error",
                        "never"
                    ],
                    "default": "never",
                    "description": "Specifies message severity on which the output channel will be revealed. Requires reloading extension after change."
                },
                "rust-client.updateOnStartup": {
                    "type": "boolean",
                    "default": false,
                    "description": "Update the Rust toolchain and its required components whenever the extension starts up."
                },
                "rust-client.autoStartRls": {
                    "type": "boolean",
                    "default": true,
                    "description": "Start RLS automatically when opening a file or project.",
                    "scope": "resource"
                },
                "rust-client.disableRustup": {
                    "type": "boolean",
                    "default": false,
                    "description": "Disable usage of rustup and use rustc/rls/rust-analyzer from PATH."
                },
                "rust-client.channel": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "enum": [
                                "default",
                                "stable",
                                "beta",
                                "nightly"
                            ],
                            "enumDescriptions": [
                                "Uses the same channel as your currently open project",
                                "Explicitly use the `stable` channel",
                                "Explicitly use the `beta` channel",
                                "Explicitly use the `nightly` channel"
                            ]
                        }
                    ],
                    "default": "default",
                    "description": "Rust channel to invoke rustup with. Ignored if rustup is disabled. By default, uses the same channel as your currently open project."
                },
                "rust-client.trace.server": {
                    "type": "string",
                    "enum": [
                        "off",
                        "messages",
                        "verbose"
                    ],
                    "default": "off",
                    "description": "Traces the communication between VS Code and the Rust language server.",
                    "scope": "window"
                },
                "rust-client.enableMultiProjectSetup": {
                    "type": [
                        "boolean",
                        "null"
                    ],
                    "default": null,
                    "description": "Allow multiple projects in the same folder, along with removing the constraint that the cargo.toml must be located at the root. (Experimental: might not work for certain setups)"
                },
                "rust.sysroot": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "--sysroot",
                    "scope": "resource"
                },
                "rust.target": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "--target",
                    "scope": "resource"
                },
                "rust.rustflags": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Flags added to RUSTFLAGS.",
                    "scope": "resource"
                },
                "rust.clear_env_rust_log": {
                    "type": "boolean",
                    "default": true,
                    "description": "Clear the RUST_LOG environment variable before running rustc or cargo.",
                    "scope": "resource"
                },
                "rust.build_lib": {
                    "type": [
                        "boolean",
                        "null"
                    ],
                    "default": null,
                    "description": "Specify to run analysis as if running `cargo check --lib`. Use `null` to auto-detect. (unstable)",
                    "scope": "resource"
                },
                "rust.build_bin": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Specify to run analysis as if running `cargo check --bin <name>`. Use `null` to auto-detect. (unstable)",
                    "scope": "resource"
                },
                "rust.cfg_test": {
                    "type": "boolean",
                    "default": false,
                    "description": "Build cfg(test) code. (unstable)",
                    "scope": "resource"
                },
                "rust.unstable_features": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable unstable features.",
                    "scope": "resource"
                },
                "rust.wait_to_build": {
                    "type": [
                        "number",
                        "null"
                    ],
                    "default": null,
                    "description": "Time in milliseconds between receiving a change notification and starting build.",
                    "scope": "resource"
                },
                "rust.show_warnings": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show warnings.",
                    "scope": "resource"
                },
                "rust.crate_blacklist": {
                    "type": [
                        "array",
                        "null"
                    ],
                    "default": [
                        "cocoa",
                        "gleam",
                        "glium",
                        "idna",
                        "libc",
                        "openssl",
                        "rustc_serialize",
                        "serde",
                        "serde_json",
                        "typenum",
                        "unicode_normalization",
                        "unicode_segmentation",
                        "winapi"
                    ],
                    "description": "Overrides the default list of packages for which analysis is skipped.\nAvailable since RLS 1.38",
                    "scope": "resource"
                },
                "rust.build_on_save": {
                    "type": "boolean",
                    "default": false,
                    "description": "Only index the project when a file is saved and not on change.",
                    "scope": "resource"
                },
                "rust.features": {
                    "type": "array",
                    "default": [],
                    "description": "A list of Cargo features to enable.",
                    "scope": "resource"
                },
                "rust.all_features": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable all Cargo features.",
                    "scope": "resource"
                },
                "rust.no_default_features": {
                    "type": "boolean",
                    "default": false,
                    "description": "Do not enable default Cargo features.",
                    "scope": "resource"
                },
                "rust.racer_completion": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enables code completion using racer.",
                    "scope": "resource"
                },
                "rust.clippy_preference": {
                    "type": "string",
                    "enum": [
                        "on",
                        "opt-in",
                        "off"
                    ],
                    "default": "opt-in",
                    "description": "Controls eagerness of clippy diagnostics when available. Valid values are (case-insensitive):\n - \"off\": Disable clippy lints.\n - \"on\": Display the same diagnostics as command-line clippy invoked with no arguments (`clippy::all` unless overridden).\n - \"opt-in\": Only display the lints explicitly enabled in the code. Start by adding `#![warn(clippy::all)]` to the root of each crate you want linted.\nYou need to install clippy via rustup if you haven't already.",
                    "scope": "resource"
                },
                "rust.jobs": {
                    "type": [
                        "number",
                        "null"
                    ],
                    "default": null,
                    "description": "Number of Cargo jobs to be run in parallel.",
                    "scope": "resource"
                },
                "rust.all_targets": {
                    "type": "boolean",
                    "default": true,
                    "description": "Checks the project as if you were running cargo check --all-targets (I.e., check all targets and integration tests too).",
                    "scope": "resource"
                },
                "rust.target_dir": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "When specified, it places the generated analysis files at the specified target directory. By default it is placed target/rls directory.",
                    "scope": "resource"
                },
                "rust.rustfmt_path": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "When specified, RLS will use the Rustfmt pointed at the path instead of the bundled one",
                    "scope": "resource"
                },
                "rust.build_command": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "EXPERIMENTAL (requires `unstable_features`)\nIf set, executes a given program responsible for rebuilding save-analysis to be loaded by the RLS. The program given should output a list of resulting .json files on stdout. \nImplies `rust.build_on_save`: true.",
                    "scope": "resource"
                },
                "rust.full_docs": {
                    "type": [
                        "boolean",
                        "null"
                    ],
                    "default": null,
                    "description": "Instructs cargo to enable full documentation extraction during save-analysis while building the crate.",
                    "scope": "resource"
                },
                "rust.show_hover_context": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show additional context in hover tooltips when available. This is often the type local variable declaration.",
                    "scope": "resource"
                },
                "rust.rust-analyzer": {
                    "type": "object",
                    "default": {},
                    "description": "Settings passed down to rust-analyzer server",
                    "scope": "resource"
                },
                "rust.rust-analyzer.releaseTag": {
                    "type": "string",
                    "default": "nightly",
                    "description": "Which binary release to download and use"
                },
                "rust.rust-analyzer.path": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "When specified, uses the rust-analyzer binary at a given path"
                }
            }
        },
        "semanticTokenTypes": [
            {
                "id": "attribute",
                "description": "Style for attributes"
            },
            {
                "id": "builtinType",
                "description": "Style for builtin types",
                "superType": "type"
            },
            {
                "id": "lifetime",
                "description": "Style for lifetimes"
            },
            {
                "id": "typeAlias",
                "description": "Style for type aliases",
                "superType": "type"
            },
            {
                "id": "union",
                "description": "Style for C-style untagged unions",
                "superType": "type"
            },
            {
                "id": "unresolvedReference",
                "description": "Style for names which can not be resolved due to compilation errors"
            },
            {
                "id": "formatSpecifier",
                "description": "Style for {} placeholders in format strings"
            }
        ],
        "semanticTokenModifiers": [
            {
                "id": "constant",
                "description": "Style for compile-time constants"
            },
            {
                "id": "controlFlow",
                "description": "Style for control flow keywords"
            },
            {
                "id": "mutable",
                "description": "Style for mutable bindings"
            },
            {
                "id": "unsafe",
                "description": "Style for unsafe operations"
            }
        ],
        "semanticTokenScopes": [
            {
                "language": "rust",
                "scopes": {
                    "attribute": [
                        "meta.attribute.rust"
                    ],
                    "builtinType": [
                        "support.type.primitive.rust"
                    ],
                    "lifetime": [
                        "storage.modifier.lifetime.rust"
                    ],
                    "typeAlias": [
                        "entity.name.type.typeAlias.rust"
                    ],
                    "union": [
                        "entity.name.type.union.rust"
                    ],
                    "struct": [
                        "entity.name.type.struct.rust"
                    ],
                    "keyword": [
                        "keyword.other.rust"
                    ],
                    "keyword.controlFlow": [
                        "keyword.control.rust"
                    ],
                    "variable.constant": [
                        "variable.other.constant.rust"
                    ],
                    "formatSpecifier": [
                        "punctuation.section.embedded.rust"
                    ],
                    "*.mutable": [
                        "markup.underline"
                    ]
                }
            }
        ]
    }
}
